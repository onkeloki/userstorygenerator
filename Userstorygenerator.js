// Generated by CoffeeScript 1.7.1
var Userstorygenerator;

Userstorygenerator = (function() {
  function Userstorygenerator(inputSelector, outputSelector, story) {
    this.inputSelector = inputSelector;
    this.outputSelector = outputSelector;
    this.story = story;
    $("body").on("keyup", ".template", (function(_this) {
      return function(e) {
        return _this.updateStoryTemplate($(e.currentTarget).val());
      };
    })(this));
    $("body").on("click", ".templateSetter", (function(_this) {
      return function(e) {
        return _this.updateStoryTemplate($(e.currentTarget).data("template"));
      };
    })(this));
    $(this.inputSelector).on("keyup", ".variable", (function(_this) {
      return function() {
        return _this.tellStory();
      };
    })(this));
    $(".template").val(this.story);
    this.render(this.story);
  }

  Userstorygenerator.prototype.updateStoryTemplate = function(newTemplate) {
    return this.render(newTemplate);
  };

  Userstorygenerator.prototype.render = function(story) {
    this.story = story;
    this.generateView();
    return this.tellStory();
  };

  Userstorygenerator.prototype.escapeHtml = function(text) {
    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  };

  Userstorygenerator.prototype.getPlaceHolders = function() {
    var word;
    this.story = this.story.split(",").join(" ,");
    this.words = this.story.split(" ");
    this.placeholders = (function() {
      var _i, _len, _ref, _results;
      _ref = this.words;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        _results.push(this.isPlaceholder(word));
      }
      return _results;
    }).call(this);
    this.story = this.story.split(" ,").join(",");
    this.placeholders = $.grep(this.placeholders, function(value) {
      return value !== false;
    });
    return this.placeholders = this.placeholders.filter((function(_this) {
      return function(v, i, a) {
        return a.indexOf(v) === i;
      };
    })(this));
  };

  Userstorygenerator.prototype.generateView = function() {
    var $col, $row, placeholder, _i, _len, _ref;
    this.getPlaceHolders();
    $row = $("<tr>");
    $(this.inputSelector).empty();
    _ref = this.placeholders;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      placeholder = _ref[_i];
      $col = $("<td>");
      $col.append($("<input>").addClass("variable").attr("placeholder", "<" + placeholder + ">").attr("data-value", placeholder).val(""));
      $row.append($col);
    }
    return $(this.inputSelector).append($("<table>").append($row));
  };

  Userstorygenerator.prototype.placeHolderToVariableName = function(placeholder) {
    return placeholder.substr(1, placeholder.length - 2);
  };

  Userstorygenerator.prototype.isPlaceholder = function(word) {
    if (word.substr(0, 1) === "{" && word.substr(-1) === "}") {
      return this.placeHolderToVariableName(word);
    }
    return false;
  };

  Userstorygenerator.prototype.tellStory = function() {
    var output, placeholder, value, _i, _len, _ref;
    output = this.story;
    _ref = this.placeholders;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      placeholder = _ref[_i];
      value = $("[data-value='" + placeholder + "']").val().trim();
      if (value === "") {
        value = "<" + placeholder + ">";
      }
      output = output.split("{" + placeholder + "}").join("<span class='hilight'>" + (this.escapeHtml(value)) + "</span>");
    }
    return $(this.outputSelector).html(output);
  };

  return Userstorygenerator;

})();
